const axios = require("axios");
const { TOGETHER_API_URL, WEATHER_API_URL } = require("../utils/constants");

async function getWeatherData(city = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {
  try {
    const response = await axios.get(WEATHER_API_URL, {
      params: {
        q: city,
        days: 1,
        lang: 'ru',
        key: process.env.WEATHER_API_KEY
      }
    })

    const result = response.data;

    if (!result.forecast.forecastday[0].date) {
      throw new Error('–û—à–∏–±–∫–∞, result: ', result);
    }

    const date = result.forecast.forecastday[0].date; // –¥–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä "2025-04-08"

    const forecastDay = result.forecast.forecastday[0].day;
    const maxTemp = Math.round(forecastDay.maxtemp_c); // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –¥–µ–Ω—å
    const minTemp = Math.round(forecastDay.mintemp_c); // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –¥–µ–Ω—å
    const maxWind = Math.round(forecastDay.maxwind_kph); // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
    const chanceOfRain = forecastDay.daily_chance_of_rain; // —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –Ω–∞–ø—Ä–∏–º–µ—Ä 73
    const chanceOfSnow = forecastDay.daily_chance_of_snow; // —à–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç —Å–Ω–µ–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä 90
    const weatherReport = forecastDay.condition.text; // –æ—Ü–µ–Ω–∫–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –°–æ–ª–Ω–µ—á–Ω–æ

    const astro = result.forecast.forecastday[0].astro;
    const sunrise = astro.sunrise; // –≤–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞
    const sunset = astro.sunset; // –∑–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞
    const moonrise = astro.moonrise; // –≤–æ—Å—Ö–æ–¥ –ª—É–Ω—ã
    const moonset = astro.moonset; // –∑–∞–∫–∞—Ç –ª—É–Ω—ã

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    const hours = result.forecast.forecastday[0].hour;
    const hourlyForecast = hours.map(hour => ({
      time: hour.time.split(' ')[1], // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
      temp: Math.round(hour.temp_c),
      condition: hour.condition.text,
      chance_of_rain: hour.chance_of_rain
    }));

    // –ö–ª—é—á–µ–≤—ã–µ —á–∞—Å—ã
    const keyHours = [6, 9, 12, 15, 18, 21];
    const keyHourlyForecast = hourlyForecast.filter(hour => 
      keyHours.includes(parseInt(hour.time.split(':')[0]))
    );

    return {
      date,
      maxTemp,
      minTemp,
      maxWind,
      chanceOfRain,
      chanceOfSnow,
      weatherReport,
      sunrise,
      sunset,
      moonrise,
      moonset,
      hourlyForecast: keyHourlyForecast
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã: ', error.message);
    return null;
  }
}

async function generateWeatherReport(city = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {
  const weatherData = await getWeatherData(city);
  
  if (!weatherData) {
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
  }

  try {
    const hourlyForecastText = weatherData.hourlyForecast.map(hour => 
      `‚è∞ ${hour.time}: ${hour.temp}¬∞C, ${hour.condition}${hour.chance_of_rain > 0 ? ` (üåß ${hour.chance_of_rain}%)` : ''}`
    ).join('\n');

    const strictPrompt = `
      –°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –≤–µ—Å—ë–ª—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ ${weatherData.date} –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:

      üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:
      - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${weatherData.maxTemp}¬∞C
      - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${weatherData.minTemp}¬∞C

      üå¨ –í–µ—Ç–µ—Ä: –¥–æ ${weatherData.maxWind} –∫–º/—á
      –û—Å–∞–¥–∫–∏: ${weatherData.chanceOfRain}% –Ω–∞ –¥–æ–∂–¥—å, ${weatherData.chanceOfSnow}% –Ω–∞ —Å–Ω–µ–≥

      ‚òÄÔ∏è –°–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å:
      - –í–æ—Å—Ö–æ–¥: ${weatherData.sunrise}
      - –ó–∞–∫–∞—Ç: ${weatherData.sunset}

      –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑:
      ${hourlyForecastText}

      –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
      1. –ù–∞—á–Ω–∏ —Å –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ—Å–∞–¥–∫–∏, –≤–µ—Ç–µ—Ä)
      2. –î–æ–±–∞–≤—å –∞–Ω–∞–ª–∏–∑ –ø–æ—á–∞—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞—Ç—å –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ/–ø–æ—Ö–æ–ª–æ–¥–∞–Ω–∏–µ)
      3. –í–∫–ª—é—á–∏ 1-2 —à—É—Ç–∫–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É (–Ω–æ –±–µ–∑ –ø–æ—à–ª–æ—Å—Ç–µ–π)
      4. –î–æ–±–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ
      5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      6. –°–æ—Ö—Ä–∞–Ω—è–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω
      7. –î–ª–∏–Ω–∞: 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

      –ù–µ –ø–∏—à–∏ "<think>" –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–º–µ—Ç–∫–∏ - —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑!
    `

    const response = await axios.post(
      TOGETHER_API_URL,
      {
        model: "deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free",
        messages: [{ role: "user", content: strictPrompt }],
        temperature: 0.9,
        max_tokens: 800
      },
      {
        headers: {
          "Authorization": `Bearer ${process.env.TOGETHER_API_KEY}`,
          "Content-Type": "application/json"
        }
      }
    );

    if (!response.data?.choices?.[0]?.message?.content) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
    }

    const forecast = response.data.choices[0].message.content
      .replace(/<think>.*<\/think>/gs, '')
      .replace(/^[^–∞-—è–ê-–Ø]*/, '')
      .trim();

    return forecast
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:", error.message);
    return "–ü–æ–≥–æ–¥–Ω—ã–π —Ä–æ–±–æ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É—Ä–µ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! ‚òï";
  }
}

module.exports = {
  generateWeatherReport
}